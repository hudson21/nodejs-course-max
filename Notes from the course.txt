REPL: 
    Read --> Read User Input
    Eval --> Evaluate User Input
    Print --> Print Output(Result)
    Loop --> Wait for new Input

Execute Files:
    used for real apps
    Predictable sequence of steps

HTTP, HTTPS --> Hyper Text Transfer Protocol: A protocol for transfering data which is understood by Browser and Server

Core Modules:
1. http --> Launch a server, send requests
2. https --> Launch a SSL server
3. fs --> 
4. path -->
5. os -->

============================= Event Loop =====================================
Keeps on running as long as there are event listeners registered

============================= Streams and Buffers ============================
Buffer: It is like a container that allows you to hold multiple chunks before they are released or done

============================= Single Thread, Event Loop & Blocking Code ================================
--- nodemon package: npm install nodemon  (--save-dev) development dependency
                                          (--save) production dependency
                                          (-g) globally in your machine


- Types of Errors

+ Syntax Errors:
+ Runtime Errors: 
+ Logical Errors: 


============================ Debug =================================================
Debug --> Add Configuration --> Nodejs:

{
    // Use IntelliSense to learn about possible attributes.
    // Hover to view descriptions of existing attributes.
    // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387
    "version": "0.2.0",
    "configurations": [
        {
            "type": "node",
            "request": "launch",
            "name": "Launch Program",
            "program": "${workspaceFolder}\\app.js",
            "restart": true,
            "runtimeExecutable": "nodemon",
            "console": "integratedTerminal"
        }
    ]
}

changing variables in debug environment: view --> debug

============================================  Express ==================================================================
npm install --save express
npm install --save body-parser

__dirname: It is a global variable that holds the absolute path of our operating system

res.sendFile(path.join(__dirname, 'views', 'shop.html'));

============================================ Templating Engines ========================================================
HTMLish Template --> 
npm install --save ejs pug express-handlebars

===================================== MVC ===========================================
Separation of Concerns
Models: Represent your data n your code. Work with your data(saving, fetching, etc...)
Views: What the user sees 
Controllers: Connecting your models and your views. Contains the "in-between" logic

===================================== Databases =====================================
Horizontal Scaling: Add more servers (and merge Data into one Database)

Vertical Scaling: Improve Server capacity/ Hardware (Adding more CPU, Memory, etc);


SQL vs NoSQL
SQL: 
    1. Data uses Schemas
    2. Relations
    3. Data is distributed across multiple tables
    4. Horizontal scaling is difficult/impossible; Vertical scaling is possible
NoSQL:
    1.Schema-less 
    2.No (or very few) Relations

    3.Data is typically merged/nested in a few collections
    4.Greate performance for mass read and write requests

npm install --save mysql2


db.execute('SELECT * FROM products')
.then(result => {console.log(result[0], result[1])})
.catch(err => console.log(err));


================================ SEQUELIZE ===============================================
What is Sequelize ?
It is an Object Relational Mapping Library (ORM)

npm install --save sequelize

Associations: It is the similar to Table Relationships (one-to-many, one-to-one, many-to-many)

================================ mongoDB =================================================
Schemaless
Table = Collections
Rows = Documents

Relations - Options:
    1. Nested/Embedded Documents
        {
            username: 'Carlos',
            age: 29,
            address: {
                street: 'Second Street',
                city: 'New York'
            }
        }
    2. References
        Customers : {
            username: 'Hudson',
            favBooks: ['id1','id2']
        }
        Books: {
            _id: 'id1',
            name: 'Lord of the Rings 1'
        }

npm install --save mongodb

============================================== Mongoose =================================================================
Object Document Mapping Library

npm install --save mongoose


============================================== Cookie ====================================================================
What is a cookie ? 

What is a Session ?
npm install --save express-session

checkout the documentation of express-session   
npm install --save connect-mongodb-session

============================================== Adding Authentication =====================================================
npm install --save bcryptjs

=========================================CSRF Attacks===========================================
Cross Site Request Forgery
npm install --save csurf
CSRF token: A token we can embed into our pages for every request that does something on the 
backend

npm install --save connect-flash

=========================================Sending Emails===========================================
SendGrid
npm install --save nodemailer nodemailer-sendgrid-transport
Find out more about nodemailer

=========================================Understanding Validation===========================================
npm install --save express-validator 

Sanitizing data means for example: getting rid of whi spaces, converting toLowercase, etc

=========================================Error Handling===========================================
You canÂ´t create an error inside of an async function (then, catch, callbacks, etc).
You need to call next(new Error('Error you want to send to be rendered by the express error middleware'))

=========================================Http Status Codes===========================================
2xx (Success)               200         Operation succeeded
                            201         Success, resource created
3xx (Redirect)              301         Moved permanently
4xx (Client-side error)     401         Not authenticated
                            403         Not authorized
                            404         Not found
                            422         Invalid input
5xx (Server-side error)     500         Server-side error

=========================================File Upload and Download===========================================
if we only use text in forms the middleware used is bodyParse(for plain text)
npm install --save multer //another third-party library that parses incoming requests for files (File requests)

IN FORMS: 
application/x-www-form-urlencoded //This is the default setting
multipart/form-data //It is the one in charge for file requests

------------------PDFKit
npm install --save pdfkit

http://pdfkit.org/docs/text.html


=========================================Pagination===========================================
When using MongoDB, you can use skip() and limit() as shown in the last lecture.

But how would that work in SQL?

Here's how you would implement pagination in SQL code: https://stackoverflow.com/questions/3799193/mysql-data-best-way-to-implement-paging

To quickly sum it up: The LIMIT command allows you to restrict the amount of data points you fetch, it's your limit() equivalent. Combined with the OFFSET command (which replaces skip()), you can control how many items you want to fetch and how many you want to skip.

When using Sequelize, the official docs describe how to add pagination: http://docs.sequelizejs.com/manual/tutorial/querying.html#pagination-limiting
